syntax = "proto3";
package spec;

message ReservedFieldNames {
    // not allowed as object property, should be escaped
    string __proto__ = 1;

    // not allowed as object property, should be escaped
    string to_string = 2;

    // not allowed as object property ONLY if a "value" field is also present
    // see OneofDiscriminatorClash below for example escaping case
    // should NOT be escaped
    string kind = 3;
}

message ReservedFieldNamesInOneof {
    oneof oneof_group {
        // reserved for our ADT discriminator ONLY if a "value" field is also present
        // see OneofDiscriminatorClashInOneof below for example escaping case
        // should NOT be escaped
        string kind = 1;

        // not allowed as object property, should be escaped
        string __proto__ = 2;

        // not allowed as object property, should be escaped
        string to_string = 3;
    }
}

// reserved oneof group fields, only escaped when both "value" and "kind fields are present
message OneofDiscriminatorClash {
    // should be escaped
    string kind = 1;
    string value = 2;
    string other = 3;
}

// reserved oneof group fields, only escaped when both "value" and "kind fields are present
message OneofDiscriminatorClashInOneof {
    oneof oneof_group {
        // should be escaped
        string kind = 1;
        string value = 2;
        string other = 3;
    }
}

message OneofDiscriminatorClashNumber {
    // should be escaped
    int64 kind = 1 [jstype = JS_STRING];
    string value = 2;
}

message NoOneofDiscriminatorClashNumber {
    // should NOT be escaped
    int64 kind = 1;
    string value = 2;
}

message NoOneofDiscriminatorClashRepeated {
    // should NOT be escaped
    repeated string kind = 1;
    string value = 2;
}

// reserved word, should be escaped
message interface {
}
// reserved word, should be escaped
message function {
}
// reserved word, should be escaped
message instanceof {
}
// reserved word, should be escaped
message switch {
}
// reserved word, should be escaped
message case {
}
// reserved word, should be escaped
message return {
}
// clash with runtime, must either be escaped or
// `MessageType` must be imported under different name
message MessageType {
}
// clash with global type "Error"
// either this message name is escaped in generated code, or the generated
// code must escape it's calls to the global error object (i.e. `new Error`)
message Error {
    string field_name = 1;
    string message = 2;
}
// clash with global type
message Object {
}
message object {
}
// clash with global type
message Uint8Array {
}
// clash with global type
message array {
}
// clash with global type
message Array {
}
// clash with global type
message string {
}
// clash with global type
message String {
}
// clash with global type
message number {
}
// clash with global type
message Number {
}
// clash with global type
message boolean {
}
// clash with global type
message Boolean {
}
// clash with global type
message bigint {
}
// clash with global type
message BigInt {
}


message ClashParent {
    // should clash with message ClashParent_ClashChild
    message ClashChild {
    }
}

// should clash with name of ClashParent.ClashChild
message ClashParent_ClashChild {
}


message NoClashFields {
    // ok as object property
    string const = 1;
    // ok as object property
    string switch = 2;
    // ok as object property
    string case = 3;
    // ok as object property
    string function = 4;
    // ok as object property
    string interface = 5;
    // ok as object property
    string return = 6;
}
message NoClashOneof {
    oneof kind {
        // ok as object property
        string const = 1;
        // ok as object property
        string switch = 2;
        // ok as object property
        string case = 3;
        // ok as object property
        string function = 4;
        // ok as object property
        string interface = 5;
        // ok as object property
        string return = 6;
    }
}
// just here as a "namespace" for the enum
message NoClashEnumWrap {
    enum X {
        // ok as object property
        instanceof = 0;
        // ok as object property
        switch = 1;
        // ok as object property
        case = 3;
        // ok as object property
        function = 4;
        // ok as object property
        interface = 5;
        // ok as object property
        return = 6;
    }
}

// method names that class with reserved property names
service NameClashService {
    rpc __proto__ (Error) returns (Error);
    rpc toString (Error) returns (Error);
    rpc name (Error) returns (Error);
    rpc constructor (Error) returns (Error);
    rpc methods (Error) returns (Error);
    rpc typeName (Error) returns (Error);
    rpc options (Error) returns (Error);
    rpc _transport (Error) returns (Error);
}
